{
  "id": "chatcmpl-954WzVrKFaI5PgehiLF4zok6bacdj",
  "object": "chat.completion",
  "created": 1710996085,
  "model": "gpt-4-0613",
  "choices": [
    {
      "index": 0,
      "message": {
        "role": "assistant",
        "content": "Sure, here is the Python code for the Bubble Sort algorithm:\n\n```python\ndef bubbleSort(arr):\n    n = len(arr)\n\n    # Traverse through all array elements\n    for i in range(n):\n\n        # Last i elements are already in place\n        for j in range(0, n - i - 1):\n\n            # Swap if the element found is greater\n            # than the next element\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n                \n    return arr\n```\nThis function works by iterating over the array multiple times. On each iteration, it compares adjacent elements and if the element at the current index is more than the element at the next index, it swaps them. This ensures that after each iteration, the largest element 'bubbles up' to its correct place in the sorted array.\n\nHere's how it works with the provided example:\n\n```python\nprint(bubbleSort([9, 7, 5, 11, 12, 2, 14, 3, 10, 6]))\n```\n\nThis will output:\n\n```python\n[2, 3, 5, 6, 7, 9, 10, 11, 12, 14]\n```\n\nAs expected.\n\nThe solution works for any given array and handles edge cases as well. It sorts an empty array to an empty array and correctly sorts an array with one or all the same elements."
      },
      "logprobs": null,
      "finish_reason": "stop"
    }
  ],
  "usage": {
    "prompt_tokens": 366,
    "completion_tokens": 315,
    "total_tokens": 681
  },
  "system_fingerprint": null
}