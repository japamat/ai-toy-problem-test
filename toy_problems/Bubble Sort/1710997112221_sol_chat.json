{
  "id": "chatcmpl-954nY88xE9rOPKb5U6qRtl0zNj9kH",
  "object": "chat.completion",
  "created": 1710997112,
  "model": "gpt-4-0613",
  "choices": [
    {
      "index": 0,
      "message": {
        "role": "assistant",
        "content": "Sure, let's implement the Bubble Sort algorithm in Python:\n\n```python\ndef bubbleSort(arr):\n    n = len(arr)\n \n    # Traverse through all array elements\n    for i in range(n-1):\n        # The last i elements are already in place\n        # inner loop to control each pass\n        for j in range(0, n-i-1):\n \n            # traverse the array from 0 to n-i-1\n            # Swap if the element found is greater than the next element\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n```\n\nHere is how it works:\n- We start by initializing 'n' with the length of the array.\n- Then we iterate over the elements of the array starting from 0 to n-1.\n- On each iteration, the highest value among the unsorted elements gets placed at its correct position (end of the unsorted section).\n- We use a second loop to iterate from 0 to n-i-1 (excluding the sorted part).\n- Inside the second loop, a comparison is made between each pair of elements. If a pair is out of order, they are swapped.\n- We keep executing this algorithm until the entire array is sorted.\n\nLet's test our function with provided test cases:\n\n```python\nprint(bubbleSort([5, 1, 4, 2, 8]))    # Expected output [1, 2, 4, 5, 8]\nprint(bubbleSort([64, 34, 25, 12, 22, 11, 90]))    # Expected output [11, 12, 22, 25, 34, 64, 90]\n```"
      },
      "logprobs": null,
      "finish_reason": "stop"
    }
  ],
  "usage": {
    "prompt_tokens": 336,
    "completion_tokens": 374,
    "total_tokens": 710
  },
  "system_fingerprint": null
}